export declare const datasourceWebOutput = "/**\n * This file was generated from MyWidget.xml\n * WARNING: All changes made to this file will be overwritten\n * @author Mendix Widgets Framework Team\n */\nimport { ComponentType, ReactNode } from \"react\";\nimport { ActionValue, EditableValue, ListValue, ListActionValue, ListAttributeValue, ListExpressionValue, ListWidgetValue } from \"mendix\";\nimport { Big } from \"big.js\";\n\nexport interface DatasourcePropertiesType {\n    contentAttribute: ListWidgetValue;\n    markerAttribute: ListAttributeValue<string | boolean | Big>;\n    actionAttribute?: ListActionValue;\n    optionalDSAttribute?: ListAttributeValue<string | boolean | Big>;\n    optionalDSAction?: ListActionValue;\n    optionalDSTextTemplate?: ListExpressionValue<string>;\n    optionalDSExpression?: ListExpressionValue<Big>;\n    optionalContent?: ListWidgetValue;\n}\n\nexport interface DatasourcePropertiesPreviewType {\n    contentAttribute: { widgetCount: number; renderer: ComponentType<{ children: ReactNode; caption?: string }> };\n    markerAttribute: string;\n    actionAttribute: {} | null;\n    optionalDSAttribute: string;\n    optionalDSAction: {} | null;\n    optionalDSTextTemplate: string;\n    optionalDSExpression: string;\n    optionalContent: { widgetCount: number; renderer: ComponentType<{ children: ReactNode; caption?: string }> };\n}\n\nexport interface MyWidgetContainerProps {\n    name: string;\n    tabIndex?: number;\n    id: string;\n    contentSource: ListValue;\n    optionalSource?: ListValue;\n    content: ListWidgetValue;\n    markerDataAttribute: ListAttributeValue<string | boolean | Big>;\n    actionAttribute?: ListActionValue;\n    textTemplateAttribute: ListExpressionValue<string>;\n    expressionAttribute: ListExpressionValue<Big>;\n    optionalDSAttribute?: ListAttributeValue<string | boolean | Big>;\n    optionalDSAction?: ListActionValue;\n    optionalDSTextTemplate?: ListExpressionValue<string>;\n    optionalDSExpression?: ListExpressionValue<Big>;\n    optionalContent?: ListWidgetValue;\n    datasourceProperties: DatasourcePropertiesType[];\n    description: EditableValue<string>;\n    action?: ActionValue;\n}\n\nexport interface MyWidgetPreviewProps {\n    readOnly: boolean;\n    renderMode: \"design\" | \"xray\" | \"structure\";\n    translate: (text: string) => string;\n    contentSource: {} | { caption: string } | { type: string } | null;\n    optionalSource: {} | { caption: string } | { type: string } | null;\n    content: { widgetCount: number; renderer: ComponentType<{ children: ReactNode; caption?: string }> };\n    markerDataAttribute: string;\n    actionAttribute: {} | null;\n    textTemplateAttribute: string;\n    expressionAttribute: string;\n    optionalDSAttribute: string;\n    optionalDSAction: {} | null;\n    optionalDSTextTemplate: string;\n    optionalDSExpression: string;\n    optionalContent: { widgetCount: number; renderer: ComponentType<{ children: ReactNode; caption?: string }> };\n    datasourceProperties: DatasourcePropertiesPreviewType[];\n    description: string;\n    action: {} | null;\n}\n";
export declare const datasourceNativeOutput = "export interface DatasourcePropertiesType {\n    contentAttribute: ListWidgetValue;\n    markerAttribute: ListAttributeValue<string | boolean | Big>;\n    actionAttribute?: ListActionValue;\n}\n\nexport interface MyWidgetProps<Style> {\n    name: string;\n    style: Style[];\n    contentSource: ListValue;\n    content: ListWidgetValue;\n    markerDataAttribute: ListAttributeValue<string | boolean | Big>;\n    actionAttribute?: ListActionValue;\n    textTemplateAttribute: ListExpressionValue<string>;\n    expressionAttribute: ListExpressionValue<Big>;\n    datasourceProperties: DatasourcePropertiesType[];\n    description: EditableValue<string>;\n    action?: ActionValue;\n}";
